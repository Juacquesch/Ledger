package ledger.io.input;

import au.com.bytecode.opencsv.CSVReader;
import ledger.database.entity.*;
import ledger.exception.ConverterException;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

/**
 * Takes a CSV file generated by First Data Corp. and converts into Ledger Object Structure
 */
public class FirstDataCorpCSVConverter extends AbstractCSVConverter {

    public FirstDataCorpCSVConverter(File file, Account account) {
        super(file, account);
    }

    @Override
    protected List<Transaction> readFile(CSVReader reader) throws ConverterException {
        List<Transaction> transactions = new LinkedList();

        try {
            String[] nextLine;

            Payee payee = new Payee("***Not Available***", "Payee information was not included in the provided data");
            boolean pending = false;
            List<Tag> tags = null;
            Note note = null;

            while ((nextLine = reader.readNext()) != null) {

                String descriptionString = nextLine[2];
                if (descriptionString.equals("Daily Ledger Bal")) continue;

                String dateString = nextLine[0];
                String checkNumberString = nextLine[1];
                String amountString = nextLine[3];

                Date date = AbstractCSVConverter.df.parse(dateString);
                Type type = convertType(descriptionString);
                int amount = (int) Math.round(Double.parseDouble(amountString) * 100);

                Transaction transaction = new Transaction(date, type, amount, getAccount(), payee, pending, tags, note);

                // Add check number if applicable
                if (type.getName().equals("Check")) {
                    int checkNumber = Integer.parseInt(checkNumberString);
                    transaction.setCheckNumber(checkNumber);
                }

                transactions.add(transaction);
            }
        } catch (IOException e) {
            throw new ConverterException("Unable to read file.", e);
        } catch (ParseException e) {
            throw new ConverterException("File is not in the valid CSV format.", e);
        }

        return transactions;
    }

    private Type convertType(String descriptionString) {
        switch (descriptionString) {
            case "Daily Ledger Bal":
                return TypeConversion.convert("");
            case "Check":
                return TypeConversion.convert("CHECK");
            case "Deposit":
                return TypeConversion.convert("ACH_CREDIT");
            case "ACH Deposit STRIPE TRANSFER":
                return TypeConversion.convert("ACH_CREDIT");
            default:
                return TypeConversion.convert("UNKNOWN");
        }
    }
}
