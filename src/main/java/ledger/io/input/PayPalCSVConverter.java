package ledger.io.input;


import au.com.bytecode.opencsv.CSVReader;
import ledger.database.entity.*;
import ledger.exception.ConverterException;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

/**
 * Takes a CSV file generated by PayPal and converts into Ledger Object Structure
 **/
public class PayPalCSVConverter extends AbstractCSVConverter {

    public PayPalCSVConverter(File file, Account account) {
        super(file, account);
    }

    @Override
    protected List<Transaction> readFile(CSVReader reader) throws ConverterException {
        List<Transaction> transactions = new LinkedList();

        try {
            String[] nextLine;

            Type type = TypeConversion.convert("");

            while ((nextLine = reader.readNext()) != null) {

                String currency = nextLine[6];
                // PayPal handles multiple currencies. We need to decide what to do for other currencies.
                if (!currency.equals("USD")) continue;

                String status = nextLine[5];
                // Need to discuss what to do here.
                if (status.equals("Denied")) continue;

                String dateString = nextLine[0];
                String payeeName = nextLine[3];
                String amountString = nextLine[7];

                //Doesn't look like PayPal types will be useful to us
                //String typeString = nextLine[4];

                Date date = AbstractCSVConverter.df.parse(dateString);
                boolean pending = isPending(status);
                int amount = (int) Math.round(Double.parseDouble(amountString) * 100);

                Payee payee;
                if (!payeeName.equals("")) payee = new Payee(payeeName, "");
                else payee = new Payee("***Not Available***" , "Payee information was not included in the provided data");
                List<Tag> tags = null;
                Note note = null;

                Transaction transaction = new Transaction(date, type, amount, getAccount(), payee, pending, tags, note);

                transactions.add(transaction);
            }

        } catch (IOException e) {
            throw new ConverterException("Unable to read file.", e);
        } catch (ParseException e) {
            throw new ConverterException("File is not in the valid CSV format.", e);
        }

        return transactions;
    }

    private boolean isPending(String status) {
        return status.equals("Pending");
    }
}
